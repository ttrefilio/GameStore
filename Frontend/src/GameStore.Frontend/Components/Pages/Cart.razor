@page "/cart"
@using GameStore.Frontend.Authorization
@using System.IdentityModel.Tokens.Jwt
@using GameStore.Frontend.Clients
@using GameStore.Frontend.Models
@using GameStore.Frontend.Services
@inject BasketState BasketState
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Cart</PageTitle>

<h3 class="mt-4 mb-4">My Cart</h3>

@if (errorList.Count > 0)
{
    @foreach (var error in errorList)
    {
        <div class="alert alert-danger">@error</div>
    }
}

<div class="row">
    <div class="col-md-9">
        @if (basket is null)
        {
            <p class="mt-2"><em>Loading...</em></p>
        }
        else
        {
            @if (basket.Items.Count == 0)
            {
                <h4>Your Cart is empty.</h4>
            }

            @foreach (var item in basket.Items)
            {
                <div class="card rounded-3 mb-4">
                    <div class="card-body p-3">
                        <div class="row d-flex justify-content-between align-items-center">
                            <div class="col-md-2 ">
                                <img src="@item.ImageUri" class="img-fluid rounded-3">
                            </div>
                            <div class="col-md-4 ">
                                <h3 class="mb-2 fw-normal">@item.Name</h3>
                            </div>
                            <div class="col-md-2 ">
                                <h4 class="mb-0">$@item.Price</h4>
                            </div>
                            <div class="col-md-3">
                                <form method="post" data-enhance style="display: flex; align-items: center; gap: 10px;">
                                    <input type="hidden" name="_handler" value="update-quantity-form" />
                                    <AntiforgeryToken />
                                    <select class="form-select" name="UpdatedQuantity" value="@item.Quantity" onchange="this.form.submit()">
                                        <option value="1" selected>1</option>
                                        <option value="2">2</option>
                                        <!-- Add more options as needed -->
                                    </select>
                                    <input type="hidden" name="GameId" value="@item.Id" />
                                </form>
                            </div>
                            <div class="col-md-1">
                                <form method="post" data-enhance>
                                    <input type="hidden" name="_handler" value="delete-item-form" />
                                    <AntiforgeryToken />
                                    <button type="submit" name="GameId" value="@item.Id"
                                        style="background: none; border: none;">
                                        <i class="bi bi-trash3-fill fs-3 text-danger"></i>
                                    </button>
                                </form>
                            </div>

                        </div>
                    </div>
                </div>
            }
        }                        
    </div>

    <div class="col-md-3">
        @if (basket?.Items.Count > 0)
        {
            <h3 class="d-flex justify-content-between align-items-center mb-3">
                <span class="text-muted">Summary</span>
            </h3>
            <hr />
            <div class="d-flex justify-content-between">
                <div class="h4">Total</div>
                <div class="h4 fw-bold">$@(basket?.TotalAmount ?? 0)</div>
            </div>
            <a class="btn btn-primary btn-lg btn-block w-100"
                data-enhance-nav="false">
                Checkout
            </a>        
        }
    </div>
</div>

<form @formname="delete-item-form" @onsubmit="@RemoveItemAsync"></form>
<form @formname="update-quantity-form" @onsubmit="@UpdateQuantityAsync"></form>

@code {
    [SupplyParameterFromForm]
    private Guid? GameId { get; set; }

    [SupplyParameterFromForm]
    public int? UpdatedQuantity { get; set; }

    private CustomerBasket? basket;

    private string? userId;

    private List<string> errorList = [];

    protected override async Task OnInitializedAsync()
    {
        userId = await GetUserIdAsync();

        await FetchBasketAsync();
    }

    private async Task UpdateQuantityAsync()
    {
        ArgumentNullException.ThrowIfNull(GameId);
        ArgumentNullException.ThrowIfNull(UpdatedQuantity);

        errorList.Clear();

        CommandResult result = await BasketState.UpdateQuantityAsync(GameId.Value, UpdatedQuantity.Value);

        if (!result.Succeeded)
        {
            errorList = result.Errors;
        }
        else
        {
            await FetchBasketAsync();
        }
    }

    private async Task RemoveItemAsync()
    {
        ArgumentNullException.ThrowIfNull(GameId);

        errorList.Clear();

        CommandResult result = await BasketState.RemoveItemAsync(GameId.Value);

        if (!result.Succeeded)
        {
            errorList = result.Errors;
        }
        else
        {
            await FetchBasketAsync();
        }
    }

    private async Task FetchBasketAsync()
    {
        basket = await BasketState.GetBasketAsync();
    }

    private async Task<string?> GetUserIdAsync()
    {
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();

        return authenticationState?.User?.FindFirst(JwtRegisteredClaimNames.Sub)?.Value;
    }    
}