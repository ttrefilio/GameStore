@page "/game/{id:guid}"
@using System.IdentityModel.Tokens.Jwt
@using GameStore.Frontend.Models
@using GameStore.Frontend.Services

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject BasketState BasketState
@inject IJSRuntime JSRuntime

<PageTitle>@title</PageTitle>

@if (game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (errorList.Count > 0)
    {
        @foreach (var error in errorList)
        {
            <div class="alert alert-danger">@error</div>
        }
    }

    <div class="row mt-4">
        <div class="col-md-4">
            <img src="@game.ImageUri" alt="@game.Name" class="img-fluid border border-secondary">
        </div>
        <div class="col-md-5">
            <h2>@game.Name</h2>
            <p class="mt-3">@game.Description</p>
            <p class="display-4 font-weight-bold">$@game.Price</p>
            @if (basket is not null && basket.Items.Any(item => item.Id == game.Id))
            {
                <a href="/cart" class="btn btn-primary">View in Cart</a>
            }
            else
            {
                <form method="post" @onsubmit="SubmitAsync" @formname="add-to-cart-form" data-enhance="@isAuthenticated">
                    <AntiforgeryToken />
                    <button type="submit" class="btn btn-primary">Add to Cart</button>
                </form>
            }
            <p class="text-secondary mt-3">Release Date: @game.ReleaseDate.ToString("MMM dd, yyyy")</p>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private GameDetails? game { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private CustomerBasket? basket;

    private string title = string.Empty;
    private List<string> errorList = [];
    private bool isAuthenticated;

    protected override async Task OnParametersSetAsync()
    {
        game = await GamesClient.GetGameAsync(Id);
        title = game.Name;
    }

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await IsUserAuthenticatedAsync();
        await FetchBasketAsync();
    }

    private async Task SubmitAsync()
    {
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("authentication/login?returnUrl=" + NavigationManager.Uri);
            return;
        }

        ArgumentNullException.ThrowIfNull(game);
        ArgumentNullException.ThrowIfNull(game.ImageUri);

        errorList.Clear();

        var newBasketItem = new BasketItem
            {
                Id = game.Id,
                Name = game.Name,
                Price = game.Price,
                Quantity = 1,
                ImageUri = game.ImageUri
            };

        CommandResult result = await BasketState.AddItemAsync(newBasketItem);

        if (!result.Succeeded)
        {
            errorList = result.Errors;
        }
        else
        {
            await FetchBasketAsync();
        }
    }

    private async Task<bool> IsUserAuthenticatedAsync()
    {
        if (authenticationState is null)
        {
            return false;
        }

        return (await authenticationState)?.User?.Identity?.IsAuthenticated == true;
    }

    private async Task FetchBasketAsync()
    {
        basket = await BasketState.GetBasketAsync();
    }    
}